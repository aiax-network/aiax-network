/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SigningTest } from "./SigningTest";

export class SigningTestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<SigningTest> {
    return super.deploy(overrides || {}) as Promise<SigningTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SigningTest {
    return super.attach(address) as SigningTest;
  }
  connect(signer: Signer): SigningTestFactory {
    return super.connect(signer) as SigningTestFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SigningTest {
    return new Contract(address, _abi, signerOrProvider) as SigningTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_theHash",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_s",
        type: "bytes32",
      },
    ],
    name: "checkSignature",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061050e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639f46e9d714610030575b600080fd5b610071600480360360a081101561004657600080fd5b506001600160a01b038135169060208101359060ff6040820135169060608101359060800135610073565b005b604080518082018690526020808201839052601c60608301527f19457468657265756d205369676e6564204d6573736167653a0a3332000000006080808401919091528351808403909101815260a083018085528151919092012060e08301909352600681526539b4b3b732b960d11b60c0909201919091526100f590610344565b6100fe866103ed565b610126604051806040016040528060078152602001660e8d0ca90c2e6d60cb1b815250610344565b61012f85610439565b610151604051806040016040528060018152602001603b60f91b815250610344565b61015d8460ff1661047a565b61017f604051806040016040528060018152602001603960f91b815250610344565b61018883610439565b6101aa604051806040016040528060018152602001607360f81b815250610344565b6101b382610439565b6101dd6040518060400160405280600981526020016832b1b932b1b7bb32b960b91b815250610344565b6040805160008152602080820180845284905260ff871682840152606082018690526080820185905291516102459260019260a080820193601f1981019281900390910190855afa158015610236573d6000803e3d6000fd5b505050602060405103516103ed565b61026d604051806040016040528060078152602001666164647265737360c81b815250610344565b610276866103ed565b6040805160008152602080820180845284905260ff8716828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa1580156102cd573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b03161461033c576040805162461bcd60e51b815260206004820152601960248201527f5369676e617475726520646f6573206e6f74206d617463682e00000000000000604482015290519081900360640190fd5b505050505050565b6103ea816040516024018080602001828103825283818151815260200191508051906020019080838360005b83811015610388578181015183820152602001610370565b50505050905090810190601f1680156103b55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905292506104b7915050565b50565b604080516001600160a01b0383166024808301919091528251808303909101815260449091019091526020810180516001600160e01b031663161765e160e11b1790526103ea906104b7565b6040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b03166327b7cf8560e01b1790526103ea906104b7565b6040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b031663f5b1bba960e01b1790526103ea905b80516a636f6e736f6c652e6c6f67602083016000808483855afa505050505056fea2646970667358221220694d40daf4df6ca4c5d5219a95b028c8b6fa833fd53604d101d3cb22360729a564736f6c63430006060033";
