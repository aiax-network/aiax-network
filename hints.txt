npm run aiax -- testnode init -t -v
~/.aiax/bin/aiax start
npm run aiax -- eth testnode
npm run aiax -- contract deploy --contracts=Gravity,ERC20TokenOne --eth-privkey=0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e --eth-supply-validator-balance=1
~/.aiax/bin/gorc -c ~/.aiax/config/gorc.toml orchestrator start --cosmos-key=testnodeorchestrator --ethereum-key=testnodevalidator_eth
~/.aiax/bin/gorc -c ~/.aiax/config/gorc.toml eth-to-cosmos 0xB581C9264f59BF0289fA76D61B2D0746dCE3C30D acc1 0x73511669fd4dE447feD18BB79bAFeAC93aB7F31f 2546bcd3c84621e976d8185a91a922ae77ecec30 10 1


Endpoints: 

grpcurl -plaintext localhost:9090 describe aiax.v1.Query
grpcurl -plaintext -d '{"address":"0xB581C9264f59BF0289fA76D61B2D0746dCE3C30D"}' localhost:9090 aiax.v1.Query/ERC20Address
curl -X GET -H "Content-Type: application/json" http://localhost:1317/aiax/v1/erc20/0xB581C9264f59BF0289fA76D61B2D0746dCE3C30D


Reciever:
0xbcd4042de499d14e55001ccbb24a551f3b954096 
ethm1hn2qgt0yn8g5u4gqrn9myjj4ruae2sykadwm3x
0xf214f2b2cd398c806f84e317254e0f0b801d0643303237d97a22a48e01628897

contract deploy | Gravity deployed at 0x73511669fd4dE447feD18BB79bAFeAC93aB7F31f
contract deploy | ERC20TokenOne deployed at 0xB581C9264f59BF0289fA76D61B2D0746dCE3C30D

~/.aiax/bin/aiax keys add acc1 --keyring-backend=test
~/.aiax/bin/aiax query bank  balances ethm1mght6z3cr0mmequdrz6u5ry5vd3qsk2jgpx9ag

eth abi:add gravity ~/Projects/softmotions/aiax/artifacts/extra/gravity-bridge/solidity/contracts/Gravity.sol/Gravity.json
yarn global add eth-cli


ts-node src/index.ts -v contract deploy --eth-privkey=0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e --eth-supply-validator-balance=0.1

~/.aiax/bin/gorc -c ~/.aiax/config/gorc.toml orchestrator start --cosmos-key=testnodeorchestrator --ethereum-key=testnodevalidator_eth 

yarn global add ganache-cli

Grpcurl 

go get github.com/fullstorydev/grpcurl/...
go install github.com/fullstorydev/grpcurl/cmd/grpcurl


# Matic

# Plasma 

* https://ethresear.ch/t/minimal-viable-plasma/426
* https://ethresear.ch/t/more-viable-plasma/2160

# Libs 

* https://github.com/romfrolov/eth-json-rpc

Wallet & cli:
* https://www.npmjs.com/package/ethers

https://www.npmjs.com/browse/depended/@ethereumjs/tx

* https://github.com/ChainSafe/ethermint-deploy

Speed:

* https://medium.com/@anton.kalyaev/cd57087dfd2e


Chain explorer

* https://github.com/forbole/big-dipper

* https://github.com/EthVM/EthVM

* Похоже подходящий https://github.com/blockscout/blockscout
  Elixir (

* No: https://github.com/gobitfly/etherchain-light
 - old
 - no erc20

DEX

* https://github.com/tendermint/liquidity

* https://sommelier.finance
* https://sommelier.finance/uniswap_glossary
* https://github.com/PeggyJV/sommelier

Ethereum Peg-Zone

* https://blog.althea.net/how-gravity-works/

* Active development: https://github.com/PeggyJV/gravity-bridge

* https://blog.cosmos.network/the-internet-of-blockchains-how-cosmos-does-interoperability-starting-with-the-ethereum-peg-zone-8744d4d2bc3f
* https://github.com/cosmos/gravity-bridge

* Own Ethereum mainnet node is required

* https://docs.ethermint.zone/#

* https://forum.cosmos.network/t/proposal-44-advancing-ethermint-gtm-and-engineering-plan-for-the-ethermint-chain/4554

Dev-ops work 
start networks with 12 nodes 24 Validators in at least two regions

While actual specs vary depending on the load and validators count, minimal requirements are:

Minimal Node:
    1GB RAM
    25GB of disk space
    1.4 GHz CPU

Minimal Validator:
  

PoS
* https://cosmos.network
* https://tendermint.com/
* https://github.com/cosmos/ethermint
* https://cryptosherlock.club/tender_mint/
* https://docs.tendermint.com/master/assets/img/tm-transaction-flow.258ca020.png
* https://docs.tendermint.com/master/nodes/running-in-production.html

# Mobile client:
* https://lunie.io/

------------------------------------------------------

* https://docs.prylabs.network/docs/getting-started
* https://geth.ethereum.org/docs/getting-started/private-net
* https://openethereum.github.io/Proof-of-Authority-Chains
* https://hackmd.io/@benjaminion/eth2_info
* https://docs.prylabs.network/docs/devtools/block-explorers
* https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-prysm-56f681646f74

-----
https://discord.com/channels/476244492043812875/476588476393848832/854023061221277707
Is it possible to run my own private network with Prysm client? (say I want my
own testnet with its own genesis block) In GETH (ETH1) I could use INIT on
a genesis.json with my own params, and then run geth with new chainid and
networkid, as a private network.  I see Prysm has chainid/networkid params, but
I don't see anywhere functionality to generate a genesis block.
